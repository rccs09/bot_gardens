const PendingAliquots = require('./pendingAliquots');
const Constants = require('../config/constants');
const { Client, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const ora = require('ora');
const fs = require('fs');
const path = require('path');
const FileManager = require('./fileManager');
const SESSION_FILE_PATH = "../database/session.json";
const Util = require('../config/util');

class WhatsAppBoot{
    client;
    sessionData;

    constructor(){
        if(!this.client){
            if(fs.existsSync(path.join(__dirname, '../database/', 'session.json'))){
                this.sessionData = require(SESSION_FILE_PATH);
                this.sessionRetrieve(this.sessionData);
            }else{
                this.generateSession();
            }
        }
    }

    sessionRetrieve(sessionData){
        this.client = new Client({session: this.sessionData});
        //console.log(this.client.getState());
        this.client.on('auth_failure', () => {
            console.log('** Error de autentificacion vuelve a generar el QRCODE **');
            try {
                fs.unlinkSync(path.join(__dirname, '../database/', 'session.json'));
                this.generateSession();
            } catch(err) {
                console.error(err);
            }
        });
        this.initSession();
    }

    generateSession(){
        this.client = new Client();
        console.log('No tenemos session guardada');
        this.client.on('qr', qr => {
            qrcode.generate(qr, { small: true });
        });

        this.client.on('authenticated', (session) => {
            this.sessionData = session;
            fs.writeFile(path.join(__dirname, '../database/', 'session.json'), JSON.stringify(session), function (err) {
                if (err) {
                    console.log(err);
                }
            });
        });

        this.client.on('auth_failure', () => {
            console.log('** Error de autentificacion vuelve a generar el QRCODE **');
        });
        this.initSession();
    }

    initSession(){
        this.client.on('ready', () => {
            console.log('Client is ready!');
            this.connectionReady();
        });
        this.client.initialize();
        this.closeSession();
    }

    closeSession(){
        this.client.on('disconnected', () => {
            console.log('La session fue cerrada desde el dispositivo');
            try {
                fs.unlinkSync(path.join(__dirname, '../database/', 'session.json'));
              } catch(err) {
                console.error(err);
              }
            
        });
    }

    listenMessage(){
        this.client.on('message', async msg => {
            const { from, to, body } = msg;
            console.log(from, to, body);
            this.validateMessageIn(from, body)
            //this.sendMessage(from, "MENSAJE DE RESUESTA DE PREUBA");
        });
    }

    validateMessageIn(from, body){
        const regNumbers =   pendingAliquots.validateFromNumber(from);
        if(regNumbers){
            console.log(regNumbers);
        }else{
            console.log("Su numero no esta registrado");
        }


        // switch (key) {
        //     case value:
                
        //         break;
        
        //     default:
        //         break;
        // }
    }

   
    sendMessage(number = null, text = null){
        number = number.replace('@c.us', '');
        number = `${number}@c.us`;
        const message = text || `Hola soy un BOT recuerda`;
        this.client.sendMessage(number, message);
    }

    connectionReady() {
        this.listenMessage();
        //readExcel();
    }

    sendAllMessage = async (req, res) => {
        const filePath = "./src/resources/ControlTesoreria.xlsx";
        const sheetAliquots = "Alicuotas";
        //const sheetCellNumbers = "Telefonos";
        const sheetCellNumbers = "TelefonosPrueba";
        const pendingAliquots = new PendingAliquots(filePath, sheetAliquots, sheetCellNumbers, "2021", "Junio" );
        await pendingAliquots.init();

        const messages = [];
        pendingAliquots.jsonXlsAlicuotas.forEach(element => {
            if(element[Constants.NAME_LABEL]){
                const rowResult = pendingAliquots.getResumeByUser(element);
                //const message = this.generateMesage(rowResult, element[Constants.HOUSE_LABEL]);
                const message = Util.generateMesage(rowResult, element[Constants.HOUSE_LABEL]);
                messages.push(element[Constants.HOUSE_LABEL] + "|" +message);
            }
        });

        for (let index = 0; index < messages.length; index++) {
            const element = messages[index].split("|");
            const regNumbers =   pendingAliquots.jsonXlsCellNumbers.find(row => row.CASA === element[0]);
            /////////////////// borrar el if
            if(index === 3){
                break;
            }
            ////////////////////////
            console.log(regNumbers);
            if(regNumbers["Celular1"] && regNumbers["Celular1"].length > 0){
                this.sendMessage(regNumbers["Celular1"], element[1]);
            }
            if(regNumbers["Celular2"] && regNumbers["Celular2"].length > 0){
                this.sendMessage(regNumbers["Celular2"], element[1]);
            }
            console.log("**********************************************");
            //await this.sleepNow(100);
        }

        res.jsonp({mensaje:'Notificaci√≥n enviada'});
    }

}

module.exports = WhatsAppBoot;

